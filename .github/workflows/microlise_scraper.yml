# .github/workflows/microlise_scraper.yml

name: Daily Microlise Delivery Report

on:
  # Trigger 1: Scheduled run at 8:00 AM GMT (UTC) every day.
  schedule:
    - cron: '0 8 * * *'

  # Trigger 2: Allows you to run this workflow manually from the Actions tab in GitHub.
  workflow_dispatch:

jobs:
  scrape-and-notify:
    # Use the latest version of Ubuntu as the operating system for the runner.
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out your repository code so the runner can access it.
      - name: Check out repository code
        uses: actions/checkout@v4

      # Step 2: Set up the Python environment.
      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # Step 3: Install the Python libraries listed in your requirements.txt file.
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Install the Chromium browser needed by Playwright.
      - name: Install Playwright browser
        run: playwright install chromium

      # Step 5: Run the scraper script.
      - name: Run the Microlise scraper
        # Set the webhook URL as an environment variable for the script to use.
        # It securely reads the value from GitHub Secrets.
        env:
          GOOGLE_CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
        run: |
          # Execute the script, passing the username and password securely from GitHub Secrets.
          python "Mico tracker.py" --username "${{ secrets.MICROLISE_USERNAME }}" --password "${{ secrets.MICROLISE_PASSWORD }}"

      # Step 6 (Optional): Upload the results if the script succeeds.
      # This allows you to download the CSV file from the workflow run page.
      - name: Upload results artifact (on success)
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: microlise-visits-report
          path: |
            visits.csv
            visits_raw.json

      # Step 7 (Optional): Upload the screenshot and logs if the script fails.
      # This is extremely helpful for debugging.
      - name: Upload debug artifact (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: microlise-debug-artifacts
          path: |
            debug_screenshot.png
            visits.csv
            visits_raw.json
